.pretty 

//Throw error on invalid input types.
.pretty input:not([type='checkbox']):not([type='radio']) {
	display: none;

	@if $pretty--debug {
		+ *:after {
			content: $pretty--err-message;
			border: 1px solid #dedede;
			border-left: 3px solid #d9534f;
			padding: 9px;
			font-size: 1em;
			font-weight: 600;
			color: #d9534f;
			@extend %posAbsolute;
			z-index: 3;
			background: #fbfbfb;
			top: 0;
			left: 0;
		}
	}
}

.pretty {
	width: fit-content;
	@extend %posRelative;
	display: inline-block;
	margin-right: 10px;
	margin-bottom: 10px;
	// white-space: nowrap;
	word-break: break-word;
	line-height: 1;
	* {
		box-sizing: border-box;
	}
	input {
		@extend %posAbsolute;
		left: 0;
		top: 0;
		min-width: 1em;
		@extend %width100;
		@extend %height100;
		z-index: $pretty--z-index-front;
		opacity: 0;
		margin: 0 !important;
		padding: 0;
	}
	.state {
        line-height: 15px;
        @extend %transitionAll300;
		label {
			position: initial;
			display: inline-block;
            @extend %fw-5;
            @extend %m0;
            @extend %transitionAll300;
			// text-indent: $pretty--label-text-offset;
			padding-left: $pretty--label-text-offset;
			min-width: $pretty--box-size;
			&:before,
			&:after {
				content: '';
				width: 15px;
				height: 15px;
				box-sizing: border-box;
				@extend %themeRadius;
				@extend %b1;
				z-index: $pretty--z-index-back;
				@extend %posAbsolute;
				left: 0;
				top: 0;
				@extend %transitionAll300;
			}
			&:before {
				border-color: var(--theme-pro-gray);
			}
			&:after {
				border-color: transparent;
			}
		}
		&.p-is-hover,
		&.p-is-indeterminate {
			display: none;
		}
	}
}
